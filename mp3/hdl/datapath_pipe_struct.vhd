-- VHDL Entity ece411.Datapath_pipe.symbol
--
-- Created:
--          by - buris2.ews (gelib-057-26.ews.illinois.edu)
--          at - 15:06:50 03/19/14
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2012.1 (Build 6)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;

ENTITY Datapath_pipe IS
   PORT( 
      DATAIN_D  : IN     lc3b_word;
      DATAIN_I  : IN     lc3b_word;
      MRESP_H   : IN     std_logic;
      RESET_L   : IN     std_logic;
      clk       : IN     std_logic;
      ADDRESS   : OUT    lc3b_word;
      ADDRESS_D : OUT    lc3b_word;
      ADDRESS_I : OUT    lc3b_word;
      DATAOUT   : OUT    lc3b_word;
      MREADD_L  : OUT    std_logic;
      MREADI_L  : OUT    std_logic;
      MWRITEH_L : OUT    std_logic;
      MWRITEL_L : OUT    std_logic;
      PC        : OUT    lc3b_word
   );

-- Declarations

END Datapath_pipe ;

--
-- VHDL Architecture ece411.Datapath_pipe.struct
--
-- Created:
--          by - buris2.ews (gelib-057-26.ews.illinois.edu)
--          at - 15:06:50 03/19/14
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2012.1 (Build 6)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;


ARCHITECTURE struct OF Datapath_pipe IS

   -- Architecture declarations

   -- Internal signal declarations
   SIGNAL ALUout3   : lc3b_word;
   SIGNAL ALUout4   : lc3b_word;
   SIGNAL CW1       : std_logic;
   SIGNAL CW2       : std_logic;
   SIGNAL CW3       : std_logic;
   SIGNAL CW4       : std_logic;
   SIGNAL CW5       : std_logic;
   SIGNAL IR1       : lc3b_word;
   SIGNAL IR2       : lc3b_word;
   SIGNAL IR3       : lc3b_word;
   SIGNAL IR4       : lc3b_word;
   SIGNAL IR5       : lc3b_word;
   SIGNAL MemData4  : lc3b_word;
   SIGNAL PC1       : lc3b_word;
   SIGNAL PC2       : lc3b_word;
   SIGNAL PC3       : lc3b_word;
   SIGNAL PC4       : lc3b_word;
   SIGNAL PC5       : lc3b_word;
   SIGNAL RegA2     : lc3b_word;
   SIGNAL RegA3     : lc3b_word;
   SIGNAL RegA4     : lc3b_word;
   SIGNAL RegB2     : lc3b_word;
   SIGNAL RegB3     : lc3b_word;
   SIGNAL RegB4     : lc3b_word;
   SIGNAL RegIn5    : lc3b_word;
   SIGNAL RegWrite5 : std_logic;
   SIGNAL STALL     : std_logic;
   SIGNAL V1        : std_logic;
   SIGNAL V2        : std_logic;
   SIGNAL V3        : std_logic;
   SIGNAL V4        : std_logic;
   SIGNAL V5        : std_logic;


   -- Component Declarations
   COMPONENT DECODE
   PORT (
      CW1     : IN     std_logic;
      IR1     : IN     lc3b_word;
      PC1     : IN     lc3b_word;
      RESET_L : IN     std_logic;
      STALL   : IN     std_logic;
      V1      : IN     std_logic;
      clk     : IN     std_logic;
      CW2     : OUT    std_logic;
      IR2     : OUT    lc3b_word;
      PC2     : OUT    lc3b_word;
      RegA2   : OUT    lc3b_word;
      RegB2   : OUT    lc3b_word;
      V2      : OUT    std_logic
   );
   END COMPONENT;
   COMPONENT EXECUTE
   PORT (
      CW2     : IN     std_logic;
      IR2     : IN     lc3b_word;
      PC2     : IN     lc3b_word;
      RESET_L : IN     std_logic;
      RegA2   : IN     lc3b_word;
      RegB2   : IN     lc3b_word;
      STALL   : IN     std_logic;
      V2      : IN     std_logic;
      clk     : IN     std_logic;
      ALUout3 : OUT    lc3b_word;
      CW3     : OUT    std_logic;
      IR3     : OUT    lc3b_word;
      PC3     : OUT    lc3b_word;
      RegA3   : OUT    lc3b_word;
      RegB3   : OUT    lc3b_word;
      V3      : OUT    std_logic
   );
   END COMPONENT;
   COMPONENT FETCH
   PORT (
      DATAIN_I  : IN     lc3b_word ;
      RESET_L   : IN     std_logic ;
      STALL     : IN     std_logic ;
      clk       : IN     std_logic ;
      ADDRESS_I : OUT    lc3b_word ;
      CW1       : OUT    std_logic ;
      IR1       : OUT    lc3b_word ;
      MREADI_L  : OUT    std_logic ;
      PC1       : OUT    lc3b_word ;
      V1        : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT MEM
   PORT (
      ALUout3   : IN     lc3b_word;
      CW3       : IN     std_logic;
      DATAIN_D  : IN     lc3b_word;
      IR3       : IN     lc3b_word;
      PC3       : IN     lc3b_word;
      RESET_L   : IN     std_logic;
      RegA3     : IN     lc3b_word;
      RegB3     : IN     lc3b_word;
      STALL     : IN     std_logic;
      V3        : IN     std_logic;
      clk       : IN     std_logic;
      ADDRESS_D : OUT    lc3b_word;
      ALUout4   : OUT    lc3b_word;
      CW4       : OUT    std_logic;
      IR4       : OUT    lc3b_word;
      MREADD_L  : OUT    std_logic;
      MWRITEH_L : OUT    std_logic;
      MWRITEL_L : OUT    std_logic;
      MemData4  : OUT    lc3b_word;
      PC4       : OUT    lc3b_word;
      RegA4     : OUT    lc3b_word;
      RegB4     : OUT    lc3b_word;
      V4        : OUT    std_logic
   );
   END COMPONENT;
   COMPONENT WRITEBACK
   PORT (
      ALUout4   : IN     lc3b_word;
      CW4       : IN     std_logic;
      IR4       : IN     lc3b_word;
      MemData4  : IN     lc3b_word;
      PC4       : IN     lc3b_word;
      RESET_L   : IN     std_logic;
      RegA4     : IN     lc3b_word;
      RegB4     : IN     lc3b_word;
      STALL     : IN     std_logic;
      V4        : IN     std_logic;
      clk       : IN     std_logic;
      CW5       : OUT    std_logic;
      IR5       : OUT    lc3b_word;
      PC5       : OUT    lc3b_word;
      RegIn5    : OUT    lc3b_word;
      RegWrite5 : OUT    std_logic;
      V5        : OUT    std_logic
   );
   END COMPONENT;
   COMPONENT stall_logic
   PORT (
      clk   : IN     std_logic;
      STALL : OUT    std_logic
   );
   END COMPONENT;

   -- Optional embedded configurations
   -- pragma synthesis_off
   FOR ALL : DECODE USE ENTITY ece411.DECODE;
   FOR ALL : EXECUTE USE ENTITY ece411.EXECUTE;
   FOR ALL : FETCH USE ENTITY ece411.FETCH;
   FOR ALL : MEM USE ENTITY ece411.MEM;
   FOR ALL : WRITEBACK USE ENTITY ece411.WRITEBACK;
   FOR ALL : stall_logic USE ENTITY ece411.stall_logic;
   -- pragma synthesis_on


BEGIN
   -- Architecture concurrent statements
   -- HDL Embedded Text Block 1 eb1
   PC <= PC1;                                  


   -- Instance port mappings.
   stage2 : DECODE
      PORT MAP (
         CW1     => CW1,
         IR1     => IR1,
         PC1     => PC1,
         RESET_L => RESET_L,
         STALL   => STALL,
         V1      => V1,
         clk     => clk,
         CW2     => CW2,
         IR2     => IR2,
         PC2     => PC2,
         RegA2   => RegA2,
         RegB2   => RegB2,
         V2      => V2
      );
   stage3 : EXECUTE
      PORT MAP (
         CW2     => CW2,
         IR2     => IR2,
         PC2     => PC2,
         RESET_L => RESET_L,
         RegA2   => RegA2,
         RegB2   => RegB2,
         STALL   => STALL,
         V2      => V2,
         clk     => clk,
         ALUout3 => ALUout3,
         CW3     => CW3,
         IR3     => IR3,
         PC3     => PC3,
         RegA3   => RegA3,
         RegB3   => RegB3,
         V3      => V3
      );
   stage1 : FETCH
      PORT MAP (
         DATAIN_I  => DATAIN_I,
         RESET_L   => RESET_L,
         STALL     => STALL,
         clk       => clk,
         ADDRESS_I => ADDRESS_I,
         CW1       => CW1,
         IR1       => IR1,
         MREADI_L  => MREADI_L,
         PC1       => PC1,
         V1        => V1
      );
   stage4 : MEM
      PORT MAP (
         ALUout3   => ALUout3,
         CW3       => CW3,
         DATAIN_D  => DATAIN_D,
         IR3       => IR3,
         PC3       => PC3,
         RESET_L   => RESET_L,
         RegA3     => RegA3,
         RegB3     => RegB3,
         STALL     => STALL,
         V3        => V3,
         clk       => clk,
         ADDRESS_D => ADDRESS_D,
         ALUout4   => ALUout4,
         CW4       => CW4,
         IR4       => IR4,
         MREADD_L  => MREADD_L,
         MWRITEH_L => MWRITEH_L,
         MWRITEL_L => MWRITEL_L,
         MemData4  => MemData4,
         PC4       => PC4,
         RegA4     => RegA4,
         RegB4     => RegB4,
         V4        => V4
      );
   stage5 : WRITEBACK
      PORT MAP (
         ALUout4   => ALUout4,
         CW4       => CW4,
         IR4       => IR4,
         MemData4  => MemData4,
         PC4       => PC4,
         RESET_L   => RESET_L,
         RegA4     => RegA4,
         RegB4     => RegB4,
         STALL     => STALL,
         V4        => V4,
         clk       => clk,
         CW5       => CW5,
         IR5       => IR5,
         PC5       => PC5,
         RegIn5    => RegIn5,
         RegWrite5 => RegWrite5,
         V5        => V5
      );
   astall_logic : stall_logic
      PORT MAP (
         clk   => clk,
         STALL => STALL
      );

END struct;
