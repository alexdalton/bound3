-- VHDL Entity ece411.stage_decode.symbol
--
-- Created:
--          by - lis2.ews (siebl-0218-26.ews.illinois.edu)
--          at - 17:02:13 04/29/14
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2012.1 (Build 6)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;

ENTITY stage_decode IS
   PORT( 
      IR1out           : IN     lc3b_word;
      PC1out           : IN     lc3b_word;
      RESET_L          : IN     std_logic;
      RegWrite5        : IN     std_logic;
      STALL_L          : IN     std_logic;
      Valid1out        : IN     std_logic;
      clearValid2      : IN     std_logic;
      clk              : IN     std_logic;
      destreg5         : IN     lc3b_reg;
      destsel5         : IN     std_logic;
      n                : IN     std_logic;
      p                : IN     std_logic;
      regdata5in       : IN     lc3b_word;
      z                : IN     std_logic;
      CW1out           : OUT    LC3B_DWORD;
      CW2out           : OUT    lc3b_dword;
      IR2out           : OUT    lc3b_word;
      PC2out           : OUT    lc3b_word;
      Valid2out        : OUT    std_logic;
      calcPC           : OUT    lc3b_word;
      invalidate_fetch : OUT    std_logic;
      regA2out         : OUT    lc3b_word;
      regB2out         : OUT    lc3b_word;
      takeBranch       : OUT    std_logic
   );

-- Declarations

END stage_decode ;

--
-- VHDL Architecture ece411.stage_decode.struct
--
-- Created:
--          by - lis2.ews (siebl-0218-26.ews.illinois.edu)
--          at - 17:02:14 04/29/14
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2012.1 (Build 6)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;

LIBRARY mp3lib;

ARCHITECTURE struct OF stage_decode IS

   -- Architecture declarations

   -- Internal signal declarations
   SIGNAL ADJ11out     : LC3b_word;
   SIGNAL ADJ9out      : LC3b_word;
   SIGNAL BEN          : std_logic;
   SIGNAL BranchAddout : lc3b_word;
   SIGNAL C            : std_logic;
   SIGNAL C1           : std_logic;
   SIGNAL CheckN       : std_logic;
   SIGNAL CheckP       : std_logic;
   SIGNAL CheckZ       : std_logic;
   SIGNAL DEST         : LC3b_reg;
   SIGNAL IR11         : std_logic;
   SIGNAL IR11_9       : lc3b_reg;
   SIGNAL IR2_0        : lc3b_reg;
   SIGNAL IR5_4        : LC3B_SHFTOP;
   SIGNAL IR8_6        : lc3b_reg;
   SIGNAL JSRAddout    : lc3b_word;
   SIGNAL NZPin        : LC3b_CC;
   SIGNAL Ncond        : std_logic;
   SIGNAL OFFSET11     : lc3b_OFFSET11;
   SIGNAL OFFSET9      : LC3B_OFFSET9;
   SIGNAL OPCODE       : LC3B_OPCODE;
   SIGNAL Pcond        : std_logic;
   SIGNAL SRCA         : LC3b_reg;
   SIGNAL SRCABRMUXout : LC3b_word;
   SIGNAL SRCAout      : LC3B_WORD;
   SIGNAL SRCB         : LC3b_reg;
   SIGNAL SRCBout      : LC3B_WORD;
   SIGNAL Zcond        : std_logic;
   SIGNAL branch       : std_logic;
   SIGNAL condJMP      : std_logic;
   SIGNAL const111     : lc3b_reg;
   SIGNAL jmp_detected : std_logic;
   SIGNAL srcAsel      : std_logic;
   SIGNAL srcBsel      : std_logic;
   SIGNAL trap         : STD_LOGIC;
   SIGNAL uncondJMP    : std_logic;

   -- Implicit buffer signal declarations
   SIGNAL CW1out_internal : LC3B_DWORD;


   -- Component Declarations
   COMPONENT ADJ11
   PORT (
      offset11 : IN     LC3b_offset11;
      ADJ11out : OUT    LC3b_word
   );
   END COMPONENT;
   COMPONENT ADJ9
   PORT (
      offset9 : IN     LC3b_offset9;
      ADJ9out : OUT    LC3b_word
   );
   END COMPONENT;
   COMPONENT AND2
   PORT (
      A : IN     std_logic ;
      B : IN     std_logic ;
      C : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT BranchAdd
   PORT (
      ADJ9out      : IN     LC3b_word ;
      PC1out       : IN     lc3b_word ;
      clk          : IN     std_logic ;
      BranchAddout : OUT    lc3b_word 
   );
   END COMPONENT;
   COMPONENT CW1sig_ripper
   PORT (
      CW1out    : IN     LC3B_DWORD ;
      clk       : IN     std_logic ;
      srcAsel   : OUT    std_logic ;
      srcBsel   : OUT    std_logic ;
      uncondJMP : OUT    std_logic ;
      branch    : OUT    std_logic ;
      trap      : OUT    STD_LOGIC 
   );
   END COMPONENT;
   COMPONENT CW_ROM
   PORT (
      OPCODE : IN     LC3B_OPCODE ;
      IR5_4  : IN     LC3B_SHFTOP ;
      clk    : IN     std_logic ;
      CW1out : OUT    LC3B_DWORD 
   );
   END COMPONENT;
   COMPONENT IRnzp_ripper
   PORT (
      IR3out : IN     lc3b_word;
      NZPin  : OUT    LC3b_CC
   );
   END COMPONENT;
   COMPONENT IRregsplitter
   PORT (
      IR1out   : IN     lc3b_word ;
      clk      : IN     std_logic ;
      IR11_9   : OUT    lc3b_reg ;
      IR8_6    : OUT    lc3b_reg ;
      IR2_0    : OUT    lc3b_reg ;
      IR5_4    : OUT    LC3B_SHFTOP ;
      IR11     : OUT    std_logic ;
      OPCODE   : OUT    LC3B_OPCODE ;
      OFFSET9  : OUT    LC3B_OFFSET9 ;
      OFFSET11 : OUT    lc3b_OFFSET11 ;
      const111 : OUT    lc3b_reg 
   );
   END COMPONENT;
   COMPONENT JSRAdd
   PORT (
      ADJ11out  : IN     LC3b_word ;
      PC1out    : IN     lc3b_word ;
      clk       : IN     std_logic ;
      JSRAddout : OUT    lc3b_word 
   );
   END COMPONENT;
   COMPONENT NOR3
   PORT (
      A : IN     STD_LOGIC;
      B : IN     STD_LOGIC;
      C : IN     STD_LOGIC;
      F : OUT    STD_LOGIC
   );
   END COMPONENT;
   COMPONENT NZPsplit
   PORT (
      dest   : IN     LC3b_reg;
      CheckN : OUT    std_logic;
      CheckP : OUT    std_logic;
      CheckZ : OUT    std_logic
   );
   END COMPONENT;
   COMPONENT OR2
   PORT (
      A : IN     std_logic ;
      B : IN     std_logic ;
      C : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT OR3
   PORT (
      A : IN     std_logic ;
      B : IN     std_logic ;
      C : IN     std_logic ;
      D : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT RegMux2
   PORT (
      A   : IN     LC3b_reg ;
      B   : IN     LC3b_reg ;
      Sel : IN     std_logic ;
      F   : OUT    LC3b_reg 
   );
   END COMPONENT;
   COMPONENT WordMux2
   PORT (
      A   : IN     LC3b_word ;
      B   : IN     LC3b_word ;
      Sel : IN     std_logic ;
      F   : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT stage_data
   PORT (
      ClearValid       : IN     std_logic ;
      Control_word     : IN     lc3b_dword ;
      IR               : IN     lc3b_word ;
      PC               : IN     lc3b_word ;
      RESET_L          : IN     std_logic ;
      STALL_L          : IN     std_logic ;
      Valid            : IN     std_logic ;
      clk              : IN     std_logic ;
      Control_word_out : OUT    lc3b_dword ;
      IR_out           : OUT    lc3b_word ;
      PC_out           : OUT    lc3b_word ;
      Valid_out        : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT REG16
   PORT (
      RESET_L : IN     STD_LOGIC ;
      A       : IN     STD_LOGIC_VECTOR (15 DOWNTO 0);
      EN      : IN     STD_LOGIC ;
      CLK     : IN     STD_LOGIC ;
      F       : OUT    STD_LOGIC_VECTOR (15 DOWNTO 0)
   );
   END COMPONENT;
   COMPONENT REGFILE
   PORT (
      CLK      : IN     STD_LOGIC ;
      DEST     : IN     LC3B_REG ;
      DIN      : IN     LC3B_WORD ;
      RESET_L  : IN     STD_LOGIC ;
      REGWRITE : IN     STD_LOGIC ;
      SRCA     : IN     LC3B_REG ;
      SRCB     : IN     LC3B_REG ;
      A        : OUT    LC3B_WORD ;
      B        : OUT    LC3B_WORD 
   );
   END COMPONENT;

   -- Optional embedded configurations
   -- pragma synthesis_off
   FOR ALL : ADJ11 USE ENTITY ece411.ADJ11;
   FOR ALL : ADJ9 USE ENTITY ece411.ADJ9;
   FOR ALL : AND2 USE ENTITY ece411.AND2;
   FOR ALL : BranchAdd USE ENTITY ece411.BranchAdd;
   FOR ALL : CW1sig_ripper USE ENTITY ece411.CW1sig_ripper;
   FOR ALL : CW_ROM USE ENTITY ece411.CW_ROM;
   FOR ALL : IRnzp_ripper USE ENTITY ece411.IRnzp_ripper;
   FOR ALL : IRregsplitter USE ENTITY ece411.IRregsplitter;
   FOR ALL : JSRAdd USE ENTITY ece411.JSRAdd;
   FOR ALL : NOR3 USE ENTITY ece411.NOR3;
   FOR ALL : NZPsplit USE ENTITY ece411.NZPsplit;
   FOR ALL : OR2 USE ENTITY ece411.OR2;
   FOR ALL : OR3 USE ENTITY ece411.OR3;
   FOR ALL : REG16 USE ENTITY mp3lib.REG16;
   FOR ALL : REGFILE USE ENTITY mp3lib.REGFILE;
   FOR ALL : RegMux2 USE ENTITY ece411.RegMux2;
   FOR ALL : WordMux2 USE ENTITY ece411.WordMux2;
   FOR ALL : stage_data USE ENTITY ece411.stage_data;
   -- pragma synthesis_on


BEGIN

   -- Instance port mappings.
   U_7 : ADJ11
      PORT MAP (
         offset11 => OFFSET11,
         ADJ11out => ADJ11out
      );
   aADJ9 : ADJ9
      PORT MAP (
         offset9 => OFFSET9,
         ADJ9out => ADJ9out
      );
   U_2 : AND2
      PORT MAP (
         A => CheckN,
         B => n,
         C => Ncond
      );
   U_3 : AND2
      PORT MAP (
         A => CheckP,
         B => p,
         C => Pcond
      );
   U_4 : AND2
      PORT MAP (
         A => CheckZ,
         B => z,
         C => Zcond
      );
   U_5 : AND2
      PORT MAP (
         A => BEN,
         B => branch,
         C => condJMP
      );
   U_6 : AND2
      PORT MAP (
         A => jmp_detected,
         B => Valid1out,
         C => takeBranch
      );
   U_12 : AND2
      PORT MAP (
         A => uncondJMP,
         B => Valid1out,
         C => C
      );
   U_14 : AND2
      PORT MAP (
         A => Valid1out,
         B => condJMP,
         C => C1
      );
   aBranchAdd : BranchAdd
      PORT MAP (
         ADJ9out      => ADJ9out,
         PC1out       => PC1out,
         clk          => clk,
         BranchAddout => BranchAddout
      );
   aCW1sig_ripper : CW1sig_ripper
      PORT MAP (
         CW1out    => CW1out_internal,
         clk       => clk,
         srcAsel   => srcAsel,
         srcBsel   => srcBsel,
         uncondJMP => uncondJMP,
         branch    => branch,
         trap      => trap
      );
   aCW_ROM : CW_ROM
      PORT MAP (
         OPCODE => OPCODE,
         IR5_4  => IR5_4,
         clk    => clk,
         CW1out => CW1out_internal
      );
   aIRnzpripper : IRnzp_ripper
      PORT MAP (
         IR3out => IR1out,
         NZPin  => NZPin
      );
   REGselector : IRregsplitter
      PORT MAP (
         IR1out   => IR1out,
         clk      => clk,
         IR11_9   => IR11_9,
         IR8_6    => IR8_6,
         IR2_0    => IR2_0,
         IR5_4    => IR5_4,
         IR11     => IR11,
         OPCODE   => OPCODE,
         OFFSET9  => OFFSET9,
         OFFSET11 => OFFSET11,
         const111 => const111
      );
   aJSRAdd : JSRAdd
      PORT MAP (
         ADJ11out  => ADJ11out,
         PC1out    => PC1out,
         clk       => clk,
         JSRAddout => JSRAddout
      );
   U_15 : NOR3
      PORT MAP (
         A => C,
         B => C1,
         C => trap,
         F => invalidate_fetch
      );
   aNZPsplit : NZPsplit
      PORT MAP (
         dest   => NZPin,
         CheckN => CheckN,
         CheckP => CheckP,
         CheckZ => CheckZ
      );
   U_1 : OR2
      PORT MAP (
         A => condJMP,
         B => uncondJMP,
         C => jmp_detected
      );
   U_0 : OR3
      PORT MAP (
         A => Ncond,
         B => Pcond,
         C => Zcond,
         D => BEN
      );
   DESTMUX : RegMux2
      PORT MAP (
         A   => destreg5,
         B   => const111,
         Sel => destsel5,
         F   => DEST
      );
   SRCAMUX : RegMux2
      PORT MAP (
         A   => IR11_9,
         B   => IR8_6,
         Sel => srcAsel,
         F   => SRCA
      );
   SRCBMUX : RegMux2
      PORT MAP (
         A   => IR2_0,
         B   => IR11_9,
         Sel => srcBsel,
         F   => SRCB
      );
   U_8 : WordMux2
      PORT MAP (
         A   => SRCAout,
         B   => JSRAddout,
         Sel => IR11,
         F   => SRCABRMUXout
      );
   U_11 : WordMux2
      PORT MAP (
         A   => SRCABRMUXout,
         B   => BranchAddout,
         Sel => branch,
         F   => calcPC
      );
   stage2data : stage_data
      PORT MAP (
         ClearValid       => clearValid2,
         Control_word     => CW1out_internal,
         IR               => IR1out,
         PC               => PC1out,
         RESET_L          => RESET_L,
         STALL_L          => STALL_L,
         Valid            => Valid1out,
         clk              => clk,
         Control_word_out => CW2out,
         IR_out           => IR2out,
         PC_out           => PC2out,
         Valid_out        => Valid2out
      );
   U_9 : REG16
      PORT MAP (
         RESET_L => RESET_L,
         A       => SRCAout,
         EN      => STALL_L,
         CLK     => clk,
         F       => regA2out
      );
   U_10 : REG16
      PORT MAP (
         RESET_L => RESET_L,
         A       => SRCBout,
         EN      => STALL_L,
         CLK     => clk,
         F       => regB2out
      );
   aREGFILE : REGFILE
      PORT MAP (
         CLK      => clk,
         DEST     => DEST,
         DIN      => regdata5in,
         RESET_L  => RESET_L,
         REGWRITE => RegWrite5,
         SRCA     => SRCA,
         SRCB     => SRCB,
         A        => SRCAout,
         B        => SRCBout
      );

   -- Implicit buffered output assignments
   CW1out <= CW1out_internal;

END struct;
