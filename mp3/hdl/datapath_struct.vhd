-- VHDL Entity ece411.Datapath.interface
--
-- Created:
--          by - buris2.ews (gelib-057-21.ews.illinois.edu)
--          at - 03:00:00 02/07/14
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2012.1 (Build 6)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;

ENTITY Datapath IS
   PORT( 
      ALUMuxSel  : IN     lc3b_4mux_sel;
      ALUop      : IN     LC3b_aluop;
      B_op       : IN     std_logic;
      DATAIN     : IN     LC3b_word;
      DestMuxSel : IN     std_logic;
      LoadIR     : IN     std_logic;
      LoadMAR    : IN     std_logic;
      LoadMDR    : IN     std_logic;
      LoadNZP    : IN     std_logic;
      LoadPC     : IN     std_logic;
      MARMuxSel  : IN     lc3b_4mux_sel;
      MDRMuxSel  : IN     std_logic;
      PCMuxSel   : IN     lc3b_8mux_sel;
      RESET_L    : IN     std_logic;
      RFMuxSel   : IN     lc3b_4mux_sel;
      RegWrite   : IN     std_logic;
      StoreSR    : IN     std_logic;
      clk        : IN     std_logic;
      ADDRESS    : OUT    LC3b_word;
      CheckN     : OUT    std_logic;
      CheckP     : OUT    std_logic;
      CheckZ     : OUT    std_logic;
      DATAOUT    : OUT    LC3b_word;
      IR11       : OUT    std_logic;
      Opcode     : OUT    LC3b_opcode;
      SHFop      : OUT    lc3b_shftop;
      m_align    : OUT    std_logic;
      n          : OUT    std_logic;
      p          : OUT    std_logic;
      z          : OUT    std_logic
   );

-- Declarations

END Datapath ;

--
-- VHDL Architecture ece411.Datapath.struct
--
-- Created:
--          by - buris2.ews (gelib-057-21.ews.illinois.edu)
--          at - 03:00:01 02/07/14
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2012.1 (Build 6)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;


ARCHITECTURE struct OF Datapath IS

   -- Architecture declarations

   -- Internal signal declarations
   SIGNAL ADJ11out       : lc3b_word;
   SIGNAL ADJ6out        : LC3b_word;
   SIGNAL ADJ8out        : lc3b_word;
   SIGNAL ADJ9out        : LC3b_word;
   SIGNAL ALUMuxout      : LC3b_word;
   SIGNAL ALUMuxout2     : LC3b_word;
   SIGNAL ALUout         : LC3b_word;
   SIGNAL BRaddout       : LC3b_word;
   SIGNAL DestMuxout     : LC3b_reg;
   SIGNAL MARMuxout      : LC3b_word;
   SIGNAL MDRMuxout      : LC3b_word;
   SIGNAL MDRout         : LC3b_word;
   SIGNAL PCMuxout       : LC3b_word;
   SIGNAL PCPlus2out     : LC3b_word;
   SIGNAL PCout          : LC3b_word;
   SIGNAL PCplusoffset11 : lc3b_word;
   SIGNAL REGDATAin      : LC3b_word;
   SIGNAL RFAout         : LC3b_word;
   SIGNAL RFBout         : LC3b_word;
   SIGNAL RFMuxout       : LC3b_word;
   SIGNAL SEXToffset6    : lc3b_word;
   SIGNAL SrcA           : LC3b_reg;
   SIGNAL SrcB           : LC3b_reg;
   SIGNAL StoreMuxout    : LC3b_reg;
   SIGNAL const          : lc3b_word;
   SIGNAL dest           : LC3b_reg;
   SIGNAL genCCout       : LC3b_CC;
   SIGNAL imm5           : LC3b_imm5;
   SIGNAL imm5sel        : std_logic;
   SIGNAL index6         : LC3b_index6;
   SIGNAL offset11       : LC3b_offset11;
   SIGNAL offset9        : LC3b_offset9;
   SIGNAL sext5out       : LC3b_word;
   SIGNAL trapvect8      : lc3b_trapvect8;

   -- Implicit buffer signal declarations
   SIGNAL ADDRESS_internal : LC3b_word;
   SIGNAL m_align_internal : std_logic;


   -- Component Declarations
   COMPONENT ADJ11
   PORT (
      clk      : IN     std_logic ;
      offset11 : IN     LC3b_offset11 ;
      ADJ11out : OUT    lc3b_word 
   );
   END COMPONENT;
   COMPONENT ADJ6
   PORT (
      clk     : IN     std_logic ;
      index6  : IN     LC3b_index6 ;
      ADJ6out : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT ADJ8
   PORT (
      clk       : IN     std_logic ;
      trapvect8 : IN     lc3b_trapvect8 ;
      ADJ8out   : OUT    lc3b_word 
   );
   END COMPONENT;
   COMPONENT ADJ9
   PORT (
      clk     : IN     std_logic ;
      offset9 : IN     LC3b_offset9 ;
      ADJ9out : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT ALU
   PORT (
      ALUop      : IN     LC3b_aluop ;
      RFAout     : IN     LC3b_word ;
      ALUMuxout2 : IN     LC3b_word ;
      clk        : IN     std_logic ;
      ALUout     : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT BRadd
   PORT (
      ADJ9out  : IN     LC3b_word ;
      PCout    : IN     LC3b_word ;
      clk      : IN     std_logic ;
      BRaddout : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT GenCC
   PORT (
      RFMuxout : IN     LC3b_word ;
      clk      : IN     std_logic ;
      genCCout : OUT    LC3b_CC 
   );
   END COMPONENT;
   COMPONENT IR
   PORT (
      LoadIR    : IN     std_logic ;
      MDRout    : IN     LC3b_word ;
      clk       : IN     std_logic ;
      Opcode    : OUT    LC3b_opcode ;
      SrcA      : OUT    LC3b_reg ;
      SrcB      : OUT    LC3b_reg ;
      dest      : OUT    LC3b_reg ;
      imm5      : OUT    LC3b_imm5 ;
      index6    : OUT    LC3b_index6 ;
      offset9   : OUT    LC3b_offset9 ;
      offset11  : OUT    LC3b_offset11 ;
      imm5sel   : OUT    std_logic ;
      IR11      : OUT    std_logic ;
      trapvect8 : OUT    lc3b_trapvect8 ;
      SHFop     : OUT    lc3b_shftop 
   );
   END COMPONENT;
   COMPONENT MEMalign
   PORT (
      ADDRESS : IN     LC3b_word;
      clk     : IN     std_logic;
      m_align : OUT    std_logic
   );
   END COMPONENT;
   COMPONENT NZP
   PORT (
      LoadNZP  : IN     std_logic ;
      clk      : IN     std_logic ;
      genCCout : IN     LC3b_CC ;
      n        : OUT    std_logic ;
      p        : OUT    std_logic ;
      z        : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT NZPsplit
   PORT (
      clk    : IN     std_logic ;
      dest   : IN     LC3b_reg ;
      CheckN : OUT    std_logic ;
      CheckP : OUT    std_logic ;
      CheckZ : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT PCplusoff11
   PORT (
      ADJ11out       : IN     lc3b_word ;
      PCout          : IN     LC3b_word ;
      clk            : IN     std_logic ;
      PCplusoffset11 : OUT    lc3b_word 
   );
   END COMPONENT;
   COMPONENT Plus2
   PORT (
      PCout      : IN     LC3b_word ;
      clk        : IN     std_logic ;
      PCPlus2out : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT Reg16
   PORT (
      Input  : IN     LC3b_word ;
      RESET  : IN     std_logic ;
      clk    : IN     std_logic ;
      load   : IN     std_logic ;
      Output : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT RegFile
   PORT (
      RESET_L     : IN     std_logic ;
      RegWrite    : IN     std_logic ;
      SrcB        : IN     LC3b_reg ;
      StoreMuxout : IN     LC3b_reg ;
      clk         : IN     std_logic ;
      DestMuxout  : IN     LC3b_reg ;
      RFAout      : OUT    LC3b_word ;
      RFBout      : OUT    LC3b_word ;
      REGDATAin   : IN     LC3b_word 
   );
   END COMPONENT;
   COMPONENT RegMux
   PORT (
      DestMuxSel : IN     std_logic ;
      dest       : IN     LC3b_reg ;
      DestMuxout : OUT    LC3b_reg ;
      clk        : IN     std_logic 
   );
   END COMPONENT;
   COMPONENT SEXT5
   PORT (
      imm5   : IN     LC3b_IMM5 ;
      sext16 : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT SEXT6
   PORT (
      clk         : IN     std_logic ;
      index6      : IN     LC3b_index6 ;
      SEXToffset6 : OUT    lc3b_word 
   );
   END COMPONENT;
   COMPONENT StoreMux
   PORT (
      SrcA        : IN     LC3b_reg ;
      StoreSR     : IN     std_logic ;
      clk         : IN     std_logic ;
      dest        : IN     LC3b_reg ;
      StoreMuxout : OUT    LC3b_reg 
   );
   END COMPONENT;
   COMPONENT WordMux2
   PORT (
      A   : IN     LC3b_word ;
      B   : IN     LC3b_word ;
      Sel : IN     std_logic ;
      F   : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT WordMux4
   PORT (
      A   : IN     lc3b_word ;
      B   : IN     lc3b_word ;
      C   : IN     lc3b_word ;
      D   : IN     lc3b_word ;
      Sel : IN     lc3b_4mux_sel ;
      F   : OUT    lc3b_word 
   );
   END COMPONENT;
   COMPONENT WordMux5
   PORT (
      A   : IN     lc3b_word ;
      B   : IN     lc3b_word ;
      C   : IN     lc3b_word ;
      D   : IN     lc3b_word ;
      E   : IN     lc3b_word ;
      Sel : IN     lc3b_8mux_sel ;
      F   : OUT    lc3b_word 
   );
   END COMPONENT;
   COMPONENT byteSelect
   PORT (
      B_op      : IN     std_logic;
      RFMuxout  : IN     LC3b_word;
      clk       : IN     std_logic;
      m_align   : IN     std_logic;
      REGDATAin : OUT    LC3b_word
   );
   END COMPONENT;
   COMPONENT sll8_const
   PORT (
      clk   : IN     std_logic ;
      const : OUT    lc3b_word 
   );
   END COMPONENT;

   -- Optional embedded configurations
   -- pragma synthesis_off
   FOR ALL : ADJ11 USE ENTITY ece411.ADJ11;
   FOR ALL : ADJ6 USE ENTITY ece411.ADJ6;
   FOR ALL : ADJ8 USE ENTITY ece411.ADJ8;
   FOR ALL : ADJ9 USE ENTITY ece411.ADJ9;
   FOR ALL : ALU USE ENTITY ece411.ALU;
   FOR ALL : BRadd USE ENTITY ece411.BRadd;
   FOR ALL : GenCC USE ENTITY ece411.GenCC;
   FOR ALL : IR USE ENTITY ece411.IR;
   FOR ALL : MEMalign USE ENTITY ece411.MEMalign;
   FOR ALL : NZP USE ENTITY ece411.NZP;
   FOR ALL : NZPsplit USE ENTITY ece411.NZPsplit;
   FOR ALL : PCplusoff11 USE ENTITY ece411.PCplusoff11;
   FOR ALL : Plus2 USE ENTITY ece411.Plus2;
   FOR ALL : Reg16 USE ENTITY ece411.Reg16;
   FOR ALL : RegFile USE ENTITY ece411.RegFile;
   FOR ALL : RegMux USE ENTITY ece411.RegMux;
   FOR ALL : SEXT5 USE ENTITY ece411.SEXT5;
   FOR ALL : SEXT6 USE ENTITY ece411.SEXT6;
   FOR ALL : StoreMux USE ENTITY ece411.StoreMux;
   FOR ALL : WordMux2 USE ENTITY ece411.WordMux2;
   FOR ALL : WordMux4 USE ENTITY ece411.WordMux4;
   FOR ALL : WordMux5 USE ENTITY ece411.WordMux5;
   FOR ALL : byteSelect USE ENTITY ece411.byteSelect;
   FOR ALL : sll8_const USE ENTITY ece411.sll8_const;
   -- pragma synthesis_on


BEGIN
   -- Architecture concurrent statements
   -- HDL Embedded Text Block 1 eb1
   --Dataout = MDRout
   DATAOUT <= MDRout;                                        


   -- Instance port mappings.
   aADJ11 : ADJ11
      PORT MAP (
         clk      => clk,
         offset11 => offset11,
         ADJ11out => ADJ11out
      );
   aADJ6 : ADJ6
      PORT MAP (
         clk     => clk,
         index6  => index6,
         ADJ6out => ADJ6out
      );
   aADJ8 : ADJ8
      PORT MAP (
         clk       => clk,
         trapvect8 => trapvect8,
         ADJ8out   => ADJ8out
      );
   aADJ9 : ADJ9
      PORT MAP (
         clk     => clk,
         offset9 => offset9,
         ADJ9out => ADJ9out
      );
   aALU : ALU
      PORT MAP (
         ALUop      => ALUop,
         RFAout     => RFAout,
         ALUMuxout2 => ALUMuxout2,
         clk        => clk,
         ALUout     => ALUout
      );
   aBRadd : BRadd
      PORT MAP (
         ADJ9out  => ADJ9out,
         PCout    => PCout,
         clk      => clk,
         BRaddout => BRaddout
      );
   aGenCC : GenCC
      PORT MAP (
         RFMuxout => RFMuxout,
         clk      => clk,
         genCCout => genCCout
      );
   aIR : IR
      PORT MAP (
         LoadIR    => LoadIR,
         MDRout    => MDRout,
         clk       => clk,
         Opcode    => Opcode,
         SrcA      => SrcA,
         SrcB      => SrcB,
         dest      => dest,
         imm5      => imm5,
         index6    => index6,
         offset9   => offset9,
         offset11  => offset11,
         imm5sel   => imm5sel,
         IR11      => IR11,
         trapvect8 => trapvect8,
         SHFop     => SHFop
      );
   aMEMalign : MEMalign
      PORT MAP (
         ADDRESS => ADDRESS_internal,
         clk     => clk,
         m_align => m_align_internal
      );
   aNZP : NZP
      PORT MAP (
         LoadNZP  => LoadNZP,
         clk      => clk,
         genCCout => genCCout,
         n        => n,
         p        => p,
         z        => z
      );
   aNZPsplit : NZPsplit
      PORT MAP (
         clk    => clk,
         dest   => dest,
         CheckN => CheckN,
         CheckP => CheckP,
         CheckZ => CheckZ
      );
   aPCplusoff11 : PCplusoff11
      PORT MAP (
         ADJ11out       => ADJ11out,
         PCout          => PCout,
         clk            => clk,
         PCplusoffset11 => PCplusoffset11
      );
   aPLus2 : Plus2
      PORT MAP (
         PCout      => PCout,
         clk        => clk,
         PCPlus2out => PCPlus2out
      );
   MAR : Reg16
      PORT MAP (
         Input  => MARMuxout,
         RESET  => RESET_L,
         clk    => clk,
         load   => LoadMAR,
         Output => ADDRESS_internal
      );
   MDR : Reg16
      PORT MAP (
         Input  => MDRMuxout,
         RESET  => RESET_L,
         clk    => clk,
         load   => LoadMDR,
         Output => MDRout
      );
   PC : Reg16
      PORT MAP (
         Input  => PCMuxout,
         RESET  => RESET_L,
         clk    => clk,
         load   => LoadPC,
         Output => PCout
      );
   aRegFile : RegFile
      PORT MAP (
         RESET_L     => RESET_L,
         RegWrite    => RegWrite,
         SrcB        => SrcB,
         StoreMuxout => StoreMuxout,
         clk         => clk,
         DestMuxout  => DestMuxout,
         RFAout      => RFAout,
         RFBout      => RFBout,
         REGDATAin   => REGDATAin
      );
   DestMux : RegMux
      PORT MAP (
         DestMuxSel => DestMuxSel,
         dest       => dest,
         DestMuxout => DestMuxout,
         clk        => clk
      );
   aSEXT5 : SEXT5
      PORT MAP (
         imm5   => imm5,
         sext16 => sext5out
      );
   aSEXT6 : SEXT6
      PORT MAP (
         clk         => clk,
         index6      => index6,
         SEXToffset6 => SEXToffset6
      );
   aStoreMux : StoreMux
      PORT MAP (
         SrcA        => SrcA,
         StoreSR     => StoreSR,
         clk         => clk,
         dest        => dest,
         StoreMuxout => StoreMuxout
      );
   ALUMux : WordMux2
      PORT MAP (
         A   => RFBout,
         B   => sext5out,
         Sel => imm5sel,
         F   => ALUMuxout
      );
   MDRMux : WordMux2
      PORT MAP (
         A   => DATAIN,
         B   => ALUout,
         Sel => MDRMuxSel,
         F   => MDRMuxout
      );
   ALUMux2 : WordMux4
      PORT MAP (
         A   => ALUMuxout,
         B   => ADJ6out,
         C   => SEXToffset6,
         D   => const,
         Sel => ALUMuxSel,
         F   => ALUMuxout2
      );
   MARMux : WordMux4
      PORT MAP (
         A   => PCout,
         B   => ALUout,
         C   => ADJ8out,
         D   => MDRout,
         Sel => MARMuxSel,
         F   => MARMuxout
      );
   RFMux : WordMux4
      PORT MAP (
         A   => MDRout,
         B   => ALUout,
         C   => BRaddout,
         D   => PCout,
         Sel => RFMuxSel,
         F   => RFMuxout
      );
   PCMux : WordMux5
      PORT MAP (
         A   => PCPlus2out,
         B   => BRaddout,
         C   => RFAout,
         D   => PCplusoffset11,
         E   => RFMuxout,
         Sel => PCMuxSel,
         F   => PCMuxout
      );
   abyteSelect : byteSelect
      PORT MAP (
         B_op      => B_op,
         RFMuxout  => RFMuxout,
         clk       => clk,
         m_align   => m_align_internal,
         REGDATAin => REGDATAin
      );
   asll8const : sll8_const
      PORT MAP (
         clk   => clk,
         const => const
      );

   -- Implicit buffered output assignments
   ADDRESS <= ADDRESS_internal;
   m_align <= m_align_internal;

END struct;
