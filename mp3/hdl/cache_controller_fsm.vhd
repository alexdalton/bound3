-- VHDL Entity ece411.Cache_Controller.interface
--
-- Created:
--          by - buris2.ews (evrt-252-10.ews.illinois.edu)
--          at - 15:10:17 02/28/14
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2012.1 (Build 6)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;

ENTITY Cache_Controller IS
   PORT( 
      ACTIVE      : IN     std_logic;
      CACHE_HIT   : IN     std_logic;
      DIRTY       : IN     std_logic;
      PMRESP_H    : IN     STD_LOGIC;
      RESET_L     : IN     std_logic;
      WRITING     : IN     std_logic;
      clk         : IN     std_logic;
      CACHE_WRITE : OUT    std_logic;
      MRESP_EN    : OUT    std_logic;
      PMADDRsel   : OUT    std_logic;
      PMREAD_L    : OUT    STD_LOGIC;
      PMWRITE_L   : OUT    STD_LOGIC;
      WRstate     : OUT    std_logic;
      set_dirty   : OUT    std_logic
   );

-- Declarations

END Cache_Controller ;

--
-- VHDL Architecture ece411.Cache_Controller.fsm
--
-- Created:
--          by - buris2.ews (evrt-252-10.ews.illinois.edu)
--          at - 15:10:17 02/28/14
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2012.1 (Build 6)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;
 
ARCHITECTURE fsm OF Cache_Controller IS

   TYPE STATE_TYPE IS (
      READ_IDLE,
      WRITE_BACK,
      READ_INTO_CACHE,
      WRITE_HIT
   );
 
   -- Declare current and next state signals
   SIGNAL current_state : STATE_TYPE;
   SIGNAL next_state : STATE_TYPE;

BEGIN

   -----------------------------------------------------------------
   clocked_proc : PROCESS ( 
      clk,
      RESET_L
   )
   -----------------------------------------------------------------
   BEGIN
      IF (RESET_L = '0') THEN
         current_state <= READ_IDLE;
      ELSIF (clk'EVENT AND clk = '1') THEN
         current_state <= next_state;
      END IF;
   END PROCESS clocked_proc;
 
   -----------------------------------------------------------------
   nextstate_proc : PROCESS ( 
      ACTIVE,
      CACHE_HIT,
      DIRTY,
      PMRESP_H,
      WRITING,
      current_state
   )
   -----------------------------------------------------------------
   BEGIN
      CASE current_state IS
         WHEN READ_IDLE => 
            IF (ACTIVE = '1' and
                DIRTY = '1' and
                CACHE_HIT = '0') THEN 
               next_state <= WRITE_BACK;
            ELSIF (ACTIVE = '1' and
                   DIRTY = '0' and
                   CACHE_HIT = '0') THEN 
               next_state <= READ_INTO_CACHE;
            ELSIF (CACHE_HIT = '1' and
                   WRITING = '1') THEN 
               next_state <= WRITE_HIT;
            ELSE
               next_state <= READ_IDLE;
            END IF;
         WHEN WRITE_BACK => 
            IF (PMRESP_H = '1') THEN 
               next_state <= READ_INTO_CACHE;
            ELSE
               next_state <= WRITE_BACK;
            END IF;
         WHEN READ_INTO_CACHE => 
            IF (PMRESP_H = '1') THEN 
               next_state <= READ_IDLE;
            ELSE
               next_state <= READ_INTO_CACHE;
            END IF;
         WHEN WRITE_HIT => 
            next_state <= READ_IDLE;
         WHEN OTHERS =>
            next_state <= READ_IDLE;
      END CASE;
   END PROCESS nextstate_proc;
 
   -----------------------------------------------------------------
   output_proc : PROCESS ( 
      current_state
   )
   -----------------------------------------------------------------
   BEGIN
      -- Default Assignment
      CACHE_WRITE <= '0';
      MRESP_EN <= '0';
      PMADDRsel <= '0';
      PMREAD_L <= '1';
      PMWRITE_L <= '1';
      WRstate <= '0';
      set_dirty <= '0';

      -- Combined Actions
      CASE current_state IS
         WHEN READ_IDLE => 
            MRESP_EN <= '1';
         WHEN WRITE_BACK => 
            PMADDRsel <= '1';
            PMWRITE_L <= '0' after 6 ns;
         WHEN READ_INTO_CACHE => 
            CACHE_WRITE <= '1' after 6 ns;
            PMREAD_L <= '0' after 6ns;
         WHEN WRITE_HIT => 
            set_dirty <= '1';
            MRESP_EN <= '1';
            CACHE_WRITE <= '1' after 6 ns;
            WRstate <= '1';
         WHEN OTHERS =>
            NULL;
      END CASE;
   END PROCESS output_proc;
 
END fsm;
