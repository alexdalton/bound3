-- VHDL Entity ece411.SrcReg_MaskCalc.interface
--
-- Created:
--          by - buris2.ews (evrt-252-17.ews.illinois.edu)
--          at - 16:34:06 05/02/14
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2012.1 (Build 6)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;

ENTITY SrcReg_MaskCalc IS
   PORT( 
      RD_CW    : IN     lc3b_dword;
      RD_IR    : IN     lc3b_word;
      RD_V     : IN     std_logic;
      SrcMask  : OUT    lc3b_byte;
      srcAmask : OUT    LC3B_BYTE;
      srcBmask : OUT    LC3B_BYTE
   );

-- Declarations

END SrcReg_MaskCalc ;

--
-- VHDL Architecture ece411.SrcReg_MaskCalc.struct
--
-- Created:
--          by - buris2.ews (evrt-252-17.ews.illinois.edu)
--          at - 16:34:06 05/02/14
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2012.1 (Build 6)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;

LIBRARY mp3lib;

ARCHITECTURE struct OF SrcReg_MaskCalc IS

   -- Architecture declarations

   -- Internal signal declarations
   SIGNAL F                 : LC3B_BYTE;
   SIGNAL F1                : LC3B_BYTE;
   SIGNAL IR11_9            : lc3b_reg;
   SIGNAL IR2_0             : lc3b_reg;
   SIGNAL IR8_6             : lc3b_reg;
   SIGNAL Valid_delayed     : std_logic;
   SIGNAL Valid_expanded    : lc3b_byte;
   SIGNAL mask11_9          : LC3B_BYTE;
   SIGNAL mask2_0           : LC3B_BYTE;
   SIGNAL mask8_6           : LC3B_BYTE;
   SIGNAL src11_9           : std_logic;
   SIGNAL src2_0            : std_logic;
   SIGNAL src8_6            : std_logic;
   SIGNAL srcAsel           : std_logic;
   SIGNAL srcBsel           : std_logic;
   SIGNAL src_mask_prevalid : lc3b_byte;


   -- Component Declarations
   COMPONENT AND2_byte
   PORT (
      A : IN     lc3b_byte ;
      B : IN     lc3b_byte ;
      C : OUT    lc3b_byte 
   );
   END COMPONENT;
   COMPONENT DeMUX3_8
   PORT (
      A  : IN     lc3b_reg ;
      EN : IN     std_logic ;
      F  : OUT    LC3B_BYTE 
   );
   END COMPONENT;
   COMPONENT OR3_byte
   PORT (
      A : IN     lc3b_byte ;
      B : IN     lc3b_byte ;
      C : IN     lc3b_byte ;
      D : OUT    lc3b_byte 
   );
   END COMPONENT;
   COMPONENT RD_CW_ripper
   PORT (
      RD_CW   : IN     lc3b_dword ;
      src11_9 : OUT    std_logic ;
      src2_0  : OUT    std_logic ;
      src8_6  : OUT    std_logic ;
      srcAsel : OUT    std_logic ;
      srcBsel : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT RD_IR_ripper
   PORT (
      RD_IR  : IN     lc3b_word ;
      IR11_9 : OUT    lc3b_reg ;
      IR2_0  : OUT    lc3b_reg ;
      IR8_6  : OUT    lc3b_reg 
   );
   END COMPONENT;
   COMPONENT bit_to_byte
   PORT (
      Valid          : IN     std_logic;
      Valid_expanded : OUT    lc3b_byte
   );
   END COMPONENT;
   COMPONENT delay_6ns
   PORT (
      Vin  : IN     std_logic;
      Vout : OUT    std_logic
   );
   END COMPONENT;
   COMPONENT MUX2_8
   PORT (
      A   : IN     LC3B_BYTE ;
      B   : IN     LC3B_BYTE ;
      SEL : IN     STD_LOGIC ;
      F   : OUT    LC3B_BYTE 
   );
   END COMPONENT;

   -- Optional embedded configurations
   -- pragma synthesis_off
   FOR ALL : AND2_byte USE ENTITY ece411.AND2_byte;
   FOR ALL : DeMUX3_8 USE ENTITY ece411.DeMUX3_8;
   FOR ALL : MUX2_8 USE ENTITY mp3lib.MUX2_8;
   FOR ALL : OR3_byte USE ENTITY ece411.OR3_byte;
   FOR ALL : RD_CW_ripper USE ENTITY ece411.RD_CW_ripper;
   FOR ALL : RD_IR_ripper USE ENTITY ece411.RD_IR_ripper;
   FOR ALL : bit_to_byte USE ENTITY ece411.bit_to_byte;
   FOR ALL : delay_6ns USE ENTITY ece411.delay_6ns;
   -- pragma synthesis_on


BEGIN

   -- Instance port mappings.
   U_7 : AND2_byte
      PORT MAP (
         A => src_mask_prevalid,
         B => Valid_expanded,
         C => SrcMask
      );
   U_8 : AND2_byte
      PORT MAP (
         A => F,
         B => Valid_expanded,
         C => srcAmask
      );
   U_9 : AND2_byte
      PORT MAP (
         A => Valid_expanded,
         B => F1,
         C => srcBmask
      );
   deMUX2_0 : DeMUX3_8
      PORT MAP (
         A  => IR2_0,
         EN => src2_0,
         F  => mask2_0
      );
   deMUX8_6 : DeMUX3_8
      PORT MAP (
         A  => IR8_6,
         EN => src8_6,
         F  => mask8_6
      );
   deMUX11_9 : DeMUX3_8
      PORT MAP (
         A  => IR11_9,
         EN => src11_9,
         F  => mask11_9
      );
   U_5 : OR3_byte
      PORT MAP (
         A => mask11_9,
         B => mask8_6,
         C => mask2_0,
         D => src_mask_prevalid
      );
   aRD_CW_ripper : RD_CW_ripper
      PORT MAP (
         RD_CW   => RD_CW,
         src11_9 => src11_9,
         src2_0  => src2_0,
         src8_6  => src8_6,
         srcAsel => srcAsel,
         srcBsel => srcBsel
      );
   aRD_IR_ripper : RD_IR_ripper
      PORT MAP (
         RD_IR  => RD_IR,
         IR11_9 => IR11_9,
         IR2_0  => IR2_0,
         IR8_6  => IR8_6
      );
   Valid_expand : bit_to_byte
      PORT MAP (
         Valid          => Valid_delayed,
         Valid_expanded => Valid_expanded
      );
   U_2 : delay_6ns
      PORT MAP (
         Vin  => RD_V,
         Vout => Valid_delayed
      );
   AmaskMUX : MUX2_8
      PORT MAP (
         A   => mask11_9,
         B   => mask8_6,
         SEL => srcAsel,
         F   => F
      );
   BmaskMUX : MUX2_8
      PORT MAP (
         A   => mask2_0,
         B   => mask11_9,
         SEL => srcBsel,
         F   => F1
      );

END struct;
