-- VHDL Entity ece411.BTB.symbol
--
-- Created:
--          by - lis2.ews (siebl-0220-14.ews.illinois.edu)
--          at - 03:12:28 05/02/14
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2012.1 (Build 6)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;

ENTITY BTB IS
   PORT( 
      CLK             : IN     std_logic;
      DataIn          : IN     LC3b_word;
      DataWrite       : IN     std_logic;
      PCRead          : IN     lc3b_word;
      RESET_L         : IN     std_logic;
      TagWrite        : IN     LC3b_word;
      TakenIn         : IN     std_logic;
      DataOut         : OUT    LC3B_WORD;
      Predict_Taken_H : OUT    std_logic
   );

-- Declarations

END BTB ;

--
-- VHDL Architecture ece411.BTB.struct
--
-- Created:
--          by - lis2.ews (siebl-0220-14.ews.illinois.edu)
--          at - 03:12:29 05/02/14
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2012.1 (Build 6)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;


ARCHITECTURE struct OF BTB IS

   -- Architecture declarations

   -- Internal signal declarations
   SIGNAL BTBwaySel      : lc3b_4mux_sel;
   SIGNAL DataOut0       : LC3b_word;
   SIGNAL DataOut1       : LC3b_word;
   SIGNAL DataOut2       : LC3b_word;
   SIGNAL DataOut3       : LC3b_word;
   SIGNAL DataWriteWide  : std_logic_vector(3 DOWNTO 0);
   SIGNAL Hit            : std_logic;
   SIGNAL MRU            : LC3b_4mux_sel;
   SIGNAL ReadIndex      : std_logic;
   SIGNAL TagOut0        : LC3b_word;
   SIGNAL TagOut1        : LC3b_word;
   SIGNAL TagOut2        : LC3b_word;
   SIGNAL TagOut3        : LC3b_word;
   SIGNAL TakenOut       : STD_LOGIC;
   SIGNAL TakenOut0      : std_logic;
   SIGNAL TakenOut1      : std_logic;
   SIGNAL TakenOut2      : std_logic;
   SIGNAL TakenOut3      : std_logic;
   SIGNAL ValidOut0      : std_logic;
   SIGNAL ValidOut1      : std_logic;
   SIGNAL ValidOut2      : std_logic;
   SIGNAL ValidOut3      : std_logic;
   SIGNAL Write0         : std_logic;
   SIGNAL Write1         : std_logic;
   SIGNAL Write2         : std_logic;
   SIGNAL Write3         : std_logic;
   SIGNAL WriteHit       : std_logic;
   SIGNAL WriteHit0      : std_logic;
   SIGNAL WriteHit1      : std_logic;
   SIGNAL WriteHit2      : std_logic;
   SIGNAL WriteHit3      : std_logic;
   SIGNAL WriteIndex     : std_logic;
   SIGNAL WriteTag0      : LC3b_word;
   SIGNAL WriteTag1      : LC3b_word;
   SIGNAL WriteTag2      : LC3b_word;
   SIGNAL WriteTag3      : LC3b_word;
   SIGNAL WriteWayPreSel : lc3b_4mux_sel;
   SIGNAL WriteWaySel    : lc3b_4mux_sel;
   SIGNAL hit0           : std_logic;
   SIGNAL hit1           : std_logic;
   SIGNAL hit2           : std_logic;
   SIGNAL hit3           : std_logic;
   SIGNAL not0           : lc3b_4mux_sel;
   SIGNAL not1           : lc3b_4mux_sel;
   SIGNAL not2           : lc3b_4mux_sel;
   SIGNAL not3           : lc3b_4mux_sel;
   SIGNAL not_MRU        : lc3b_4mux_sel;
   SIGNAL prehit0        : STD_LOGIC;
   SIGNAL prehit1        : STD_LOGIC;
   SIGNAL prehit2        : STD_LOGIC;
   SIGNAL prehit3        : STD_LOGIC;
   SIGNAL writeprehit0   : STD_LOGIC;
   SIGNAL writeprehit1   : STD_LOGIC;
   SIGNAL writeprehit2   : STD_LOGIC;
   SIGNAL writeprehit3   : STD_LOGIC;


   -- Component Declarations
   COMPONENT AND2
   PORT (
      A : IN     std_logic ;
      B : IN     std_logic ;
      C : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT BTB_notMRU
   PORT (
      CLK       : IN     std_logic;
      DataIn    : IN     LC3b_4mux_sel;
      DataWrite : IN     std_logic;
      Index     : IN     std_logic;
      RESET_L   : IN     std_logic;
      DataOut   : OUT    LC3b_4mux_sel
   );
   END COMPONENT;
   COMPONENT BTB_way
   PORT (
      CLK        : IN     std_logic ;
      DataIn     : IN     LC3b_word ;
      DataWrite  : IN     std_logic ;
      RESET_L    : IN     std_logic ;
      ReadIndex  : IN     std_logic ;
      TagIn      : IN     LC3b_word ;
      TakenIn    : IN     std_logic ;
      WriteIndex : IN     std_logic ;
      DataOut    : OUT    LC3b_word ;
      TagOut     : OUT    LC3b_word ;
      TakenOut   : OUT    std_logic ;
      ValidOut   : OUT    std_logic ;
      WriteTag   : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT COMP16
   PORT (
      A : IN     LC3B_WORD;
      B : IN     LC3B_WORD;
      F : OUT    STD_LOGIC
   );
   END COMPONENT;
   COMPONENT DECODE2_4
   PORT (
      A : IN     lc3b_4mux_sel;
      F : OUT    lc3b_nibble
   );
   END COMPONENT;
   COMPONENT Encoder4to2
   PORT (
      A : IN     std_logic ;
      B : IN     std_logic ;
      C : IN     std_logic ;
      D : IN     std_logic ;
      F : OUT    std_logic_vector (1 DOWNTO 0)
   );
   END COMPONENT;
   COMPONENT MUX2_2
   PORT (
      A   : IN     STD_LOGIC_VECTOR (1 DOWNTO 0);
      B   : IN     STD_LOGIC_VECTOR (1 DOWNTO 0);
      SEL : IN     STD_LOGIC;
      F   : OUT    STD_LOGIC_VECTOR (1 DOWNTO 0)
   );
   END COMPONENT;
   COMPONENT MUX4_1
   PORT (
      A   : IN     STD_LOGIC;
      B   : IN     STD_LOGIC;
      C   : IN     STD_LOGIC;
      D   : IN     STD_LOGIC;
      SEL : IN     STD_LOGIC_VECTOR (1 DOWNTO 0);
      F   : OUT    STD_LOGIC
   );
   END COMPONENT;
   COMPONENT MUX4_16
   PORT (
      A   : IN     LC3B_WORD;
      B   : IN     LC3B_WORD;
      C   : IN     LC3B_WORD;
      D   : IN     LC3B_WORD;
      SEL : IN     STD_LOGIC_VECTOR (1 DOWNTO 0);
      F   : OUT    LC3B_WORD
   );
   END COMPONENT;
   COMPONENT MUX4_2
   PORT (
      A   : IN     STD_LOGIC_VECTOR (1 DOWNTO 0);
      B   : IN     STD_LOGIC_VECTOR (1 DOWNTO 0);
      C   : IN     STD_LOGIC_VECTOR (1 DOWNTO 0);
      D   : IN     STD_LOGIC_VECTOR (1 DOWNTO 0);
      SEL : IN     STD_LOGIC_VECTOR (1 DOWNTO 0);
      F   : OUT    STD_LOGIC_VECTOR (1 DOWNTO 0)
   );
   END COMPONENT;
   COMPONENT OR2
   PORT (
      A : IN     std_logic ;
      B : IN     std_logic ;
      C : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT OR4
   PORT (
      A : IN     std_logic ;
      B : IN     std_logic ;
      C : IN     std_logic ;
      D : IN     std_logic ;
      E : OUT    std_logic 
   );
   END COMPONENT;

   -- Optional embedded configurations
   -- pragma synthesis_off
   FOR ALL : AND2 USE ENTITY ece411.AND2;
   FOR ALL : BTB_notMRU USE ENTITY ece411.BTB_notMRU;
   FOR ALL : BTB_way USE ENTITY ece411.BTB_way;
   FOR ALL : COMP16 USE ENTITY ece411.COMP16;
   FOR ALL : DECODE2_4 USE ENTITY ece411.DECODE2_4;
   FOR ALL : Encoder4to2 USE ENTITY ece411.Encoder4to2;
   FOR ALL : MUX2_2 USE ENTITY ece411.MUX2_2;
   FOR ALL : MUX4_1 USE ENTITY ece411.MUX4_1;
   FOR ALL : MUX4_16 USE ENTITY ece411.MUX4_16;
   FOR ALL : MUX4_2 USE ENTITY ece411.MUX4_2;
   FOR ALL : OR2 USE ENTITY ece411.OR2;
   FOR ALL : OR4 USE ENTITY ece411.OR4;
   -- pragma synthesis_on


BEGIN
   -- Architecture concurrent statements
   -- HDL Embedded Text Block 1 eb1
   WriteIndex <= TagWrite(1);
   ReadIndex <= PCRead(1);

   -- HDL Embedded Text Block 2 eb2
   not0 <= "01";
   not1 <= "10";
   not2 <= "11";
   not3 <= "00";


   -- Instance port mappings.
   U_4 : AND2
      PORT MAP (
         A => prehit3,
         B => ValidOut3,
         C => hit3
      );
   U_5 : AND2
      PORT MAP (
         A => prehit2,
         B => ValidOut2,
         C => hit2
      );
   U_6 : AND2
      PORT MAP (
         A => prehit1,
         B => ValidOut1,
         C => hit1
      );
   U_7 : AND2
      PORT MAP (
         A => prehit0,
         B => ValidOut0,
         C => hit0
      );
   U_16 : AND2
      PORT MAP (
         A => ValidOut0,
         B => writeprehit0,
         C => WriteHit0
      );
   U_17 : AND2
      PORT MAP (
         A => ValidOut1,
         B => writeprehit1,
         C => WriteHit1
      );
   U_18 : AND2
      PORT MAP (
         A => ValidOut2,
         B => writeprehit2,
         C => WriteHit2
      );
   U_19 : AND2
      PORT MAP (
         A => ValidOut3,
         B => writeprehit3,
         C => WriteHit3
      );
   U_20 : AND2
      PORT MAP (
         A => Hit,
         B => TakenOut,
         C => Predict_Taken_H
      );
   U_24 : BTB_notMRU
      PORT MAP (
         RESET_L   => RESET_L,
         DataWrite => DataWrite,
         Index     => WriteIndex,
         DataIn    => WriteWaySel,
         CLK       => CLK,
         DataOut   => MRU
      );
   way0 : BTB_way
      PORT MAP (
         CLK        => CLK,
         DataIn     => DataIn,
         DataWrite  => Write0,
         RESET_L    => RESET_L,
         ReadIndex  => ReadIndex,
         TagIn      => TagWrite,
         TakenIn    => TakenIn,
         WriteIndex => WriteIndex,
         DataOut    => DataOut0,
         TagOut     => TagOut0,
         TakenOut   => TakenOut0,
         ValidOut   => ValidOut0,
         WriteTag   => WriteTag0
      );
   way1 : BTB_way
      PORT MAP (
         CLK        => CLK,
         DataIn     => DataIn,
         DataWrite  => Write1,
         RESET_L    => RESET_L,
         ReadIndex  => ReadIndex,
         TagIn      => TagWrite,
         TakenIn    => TakenIn,
         WriteIndex => WriteIndex,
         DataOut    => DataOut1,
         TagOut     => TagOut1,
         TakenOut   => TakenOut1,
         ValidOut   => ValidOut1,
         WriteTag   => WriteTag1
      );
   way2 : BTB_way
      PORT MAP (
         CLK        => CLK,
         DataIn     => DataIn,
         DataWrite  => Write2,
         RESET_L    => RESET_L,
         ReadIndex  => ReadIndex,
         TagIn      => TagWrite,
         TakenIn    => TakenIn,
         WriteIndex => WriteIndex,
         DataOut    => DataOut2,
         TagOut     => TagOut2,
         TakenOut   => TakenOut2,
         ValidOut   => ValidOut2,
         WriteTag   => WriteTag2
      );
   way3 : BTB_way
      PORT MAP (
         CLK        => CLK,
         DataIn     => DataIn,
         DataWrite  => Write3,
         RESET_L    => RESET_L,
         ReadIndex  => ReadIndex,
         TagIn      => TagWrite,
         TakenIn    => TakenIn,
         WriteIndex => WriteIndex,
         DataOut    => DataOut3,
         TagOut     => TagOut3,
         TakenOut   => TakenOut3,
         ValidOut   => ValidOut3,
         WriteTag   => WriteTag3
      );
   U_0 : COMP16
      PORT MAP (
         A => PCRead,
         B => TagOut0,
         F => prehit0
      );
   U_1 : COMP16
      PORT MAP (
         A => PCRead,
         B => TagOut1,
         F => prehit1
      );
   U_2 : COMP16
      PORT MAP (
         A => PCRead,
         B => TagOut2,
         F => prehit2
      );
   U_3 : COMP16
      PORT MAP (
         A => PCRead,
         B => TagOut3,
         F => prehit3
      );
   U_12 : COMP16
      PORT MAP (
         A => WriteTag0,
         B => TagWrite,
         F => writeprehit0
      );
   U_13 : COMP16
      PORT MAP (
         A => WriteTag1,
         B => TagWrite,
         F => writeprehit1
      );
   U_14 : COMP16
      PORT MAP (
         A => WriteTag2,
         B => TagWrite,
         F => writeprehit2
      );
   U_15 : COMP16
      PORT MAP (
         A => WriteTag3,
         B => TagWrite,
         F => writeprehit3
      );
   DecodeWriteWay : DECODE2_4
      PORT MAP (
         A => WriteWaySel,
         F => DataWriteWide
      );
   U_8 : Encoder4to2
      PORT MAP (
         A => hit0,
         B => hit1,
         C => hit2,
         D => hit3,
         F => BTBwaySel
      );
   U_21 : Encoder4to2
      PORT MAP (
         A => WriteHit0,
         B => WriteHit1,
         C => WriteHit2,
         D => WriteHit3,
         F => WriteWayPreSel
      );
   U_23 : MUX2_2
      PORT MAP (
         A   => not_MRU,
         B   => WriteWayPreSel,
         SEL => WriteHit,
         F   => WriteWaySel
      );
   U_11 : MUX4_1
      PORT MAP (
         A   => TakenOut0,
         B   => TakenOut1,
         C   => TakenOut2,
         D   => TakenOut3,
         SEL => BTBwaySel,
         F   => TakenOut
      );
   U_10 : MUX4_16
      PORT MAP (
         A   => DataOut0,
         B   => DataOut1,
         C   => DataOut2,
         D   => DataOut3,
         SEL => BTBwaySel,
         F   => DataOut
      );
   U_29 : MUX4_2
      PORT MAP (
         A   => not0,
         B   => not1,
         C   => not2,
         D   => not3,
         SEL => MRU,
         F   => not_MRU
      );
   U_25 : OR2
      PORT MAP (
         A => DataWriteWide(3),
         B => DataWrite,
         C => Write3
      );
   U_26 : OR2
      PORT MAP (
         A => DataWriteWide(0),
         B => DataWrite,
         C => Write0
      );
   U_27 : OR2
      PORT MAP (
         A => DataWriteWide(1),
         B => DataWrite,
         C => Write1
      );
   U_28 : OR2
      PORT MAP (
         A => DataWriteWide(2),
         B => DataWrite,
         C => Write2
      );
   U_9 : OR4
      PORT MAP (
         A => hit0,
         B => hit1,
         C => hit2,
         D => hit3,
         E => Hit
      );
   U_22 : OR4
      PORT MAP (
         A => WriteHit0,
         B => WriteHit1,
         C => WriteHit2,
         D => WriteHit3,
         E => WriteHit
      );

END struct;
