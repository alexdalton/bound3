-- VHDL Entity ece411.DependencyCheck.symbol
--
-- Created:
--          by - adalton2.ews (gelib-057-33.ews.illinois.edu)
--          at - 00:49:48 04/18/14
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2012.1 (Build 6)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;

ENTITY DependencyCheck IS
   PORT( 
      RD_CW        : IN     lc3b_dword;
      RD_IR        : IN     lc3b_word;
      RD_V         : IN     std_logic;
      WR_CW1       : IN     lc3b_dword;
      WR_CW2       : IN     lc3b_dword;
      WR_CW3       : IN     lc3b_dword;
      WR_IR1       : IN     lc3b_word;
      WR_IR2       : IN     lc3b_word;
      WR_IR3       : IN     lc3b_word;
      WR_V1        : IN     std_logic;
      WR_V2        : IN     std_logic;
      WR_V3        : IN     std_logic;
      RAW_hazard   : OUT    std_logic;
      RAW_hazard_L : OUT    std_logic
   );

-- Declarations

END DependencyCheck ;

--
-- VHDL Architecture ece411.DependencyCheck.struct
--
-- Created:
--          by - adalton2.ews (gelib-057-33.ews.illinois.edu)
--          at - 00:49:48 04/18/14
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2012.1 (Build 6)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;


ARCHITECTURE struct OF DependencyCheck IS

   -- Architecture declarations

   -- Internal signal declarations
   SIGNAL A                : std_logic;
   SIGNAL B                : std_logic;
   SIGNAL C                : std_logic;
   SIGNAL D                : std_logic;
   SIGNAL DestMask1        : lc3b_byte;
   SIGNAL DestMask2        : lc3b_byte;
   SIGNAL DestMask3        : lc3b_byte;
   SIGNAL E                : std_logic;
   SIGNAL F                : std_logic;
   SIGNAL G                : std_logic;
   SIGNAL H                : std_logic;
   SIGNAL SrcMask          : lc3b_byte;
   SIGNAL WRmask           : lc3b_byte;
   SIGNAL intersectionMask : lc3b_byte;
   SIGNAL lower            : std_logic;
   SIGNAL upper            : std_logic;


   -- Component Declarations
   COMPONENT AND2_byte
   PORT (
      A : IN     lc3b_byte;
      B : IN     lc3b_byte;
      C : OUT    lc3b_byte
   );
   END COMPONENT;
   COMPONENT DestReg_MaskCalc
   PORT (
      WR_CW    : IN     lc3b_dword ;
      WR_IR    : IN     lc3b_word ;
      WR_V     : IN     std_logic ;
      DestMask : OUT    lc3b_byte 
   );
   END COMPONENT;
   COMPONENT NOR2
   PORT (
      A : IN     std_logic ;
      B : IN     std_logic ;
      C : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT OR2
   PORT (
      A : IN     std_logic ;
      B : IN     std_logic ;
      C : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT OR3_byte
   PORT (
      A : IN     lc3b_byte;
      B : IN     lc3b_byte;
      C : IN     lc3b_byte;
      D : OUT    lc3b_byte
   );
   END COMPONENT;
   COMPONENT OR4
   PORT (
      A : IN     std_logic ;
      B : IN     std_logic ;
      C : IN     std_logic ;
      D : IN     std_logic ;
      E : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT SrcReg_MaskCalc
   PORT (
      RD_CW   : IN     lc3b_dword ;
      RD_IR   : IN     lc3b_word ;
      RD_V    : IN     std_logic ;
      SrcMask : OUT    lc3b_byte 
   );
   END COMPONENT;
   COMPONENT byte_splitter
   PORT (
      intersectionMask : IN     lc3b_byte ;
      A                : OUT    std_logic ;
      B                : OUT    std_logic ;
      C                : OUT    std_logic ;
      D                : OUT    std_logic ;
      E                : OUT    std_logic ;
      F                : OUT    std_logic ;
      G                : OUT    std_logic ;
      H                : OUT    std_logic 
   );
   END COMPONENT;

   -- Optional embedded configurations
   -- pragma synthesis_off
   FOR ALL : AND2_byte USE ENTITY ece411.AND2_byte;
   FOR ALL : DestReg_MaskCalc USE ENTITY ece411.DestReg_MaskCalc;
   FOR ALL : NOR2 USE ENTITY ece411.NOR2;
   FOR ALL : OR2 USE ENTITY ece411.OR2;
   FOR ALL : OR3_byte USE ENTITY ece411.OR3_byte;
   FOR ALL : OR4 USE ENTITY ece411.OR4;
   FOR ALL : SrcReg_MaskCalc USE ENTITY ece411.SrcReg_MaskCalc;
   FOR ALL : byte_splitter USE ENTITY ece411.byte_splitter;
   -- pragma synthesis_on


BEGIN

   -- Instance port mappings.
   U_5 : AND2_byte
      PORT MAP (
         A => SrcMask,
         B => WRmask,
         C => intersectionMask
      );
   EX_dest : DestReg_MaskCalc
      PORT MAP (
         WR_CW    => WR_CW1,
         WR_IR    => WR_IR1,
         WR_V     => WR_V1,
         DestMask => DestMask1
      );
   MEM_dest : DestReg_MaskCalc
      PORT MAP (
         WR_CW    => WR_CW2,
         WR_IR    => WR_IR2,
         WR_V     => WR_V2,
         DestMask => DestMask2
      );
   WB_dest : DestReg_MaskCalc
      PORT MAP (
         WR_CW    => WR_CW3,
         WR_IR    => WR_IR3,
         WR_V     => WR_V3,
         DestMask => DestMask3
      );
   U_10 : NOR2
      PORT MAP (
         A => lower,
         B => upper,
         C => RAW_hazard_L
      );
   U_9 : OR2
      PORT MAP (
         A => lower,
         B => upper,
         C => RAW_hazard
      );
   U_0 : OR3_byte
      PORT MAP (
         A => DestMask1,
         B => DestMask2,
         C => DestMask3,
         D => WRmask
      );
   U_6 : OR4
      PORT MAP (
         A => A,
         B => B,
         C => C,
         D => D,
         E => lower
      );
   U_8 : OR4
      PORT MAP (
         A => E,
         B => F,
         C => G,
         D => H,
         E => upper
      );
   DEC_src : SrcReg_MaskCalc
      PORT MAP (
         RD_CW   => RD_CW,
         RD_IR   => RD_IR,
         RD_V    => RD_V,
         SrcMask => SrcMask
      );
   U_7 : byte_splitter
      PORT MAP (
         intersectionMask => intersectionMask,
         A                => A,
         B                => B,
         C                => C,
         D                => D,
         E                => E,
         F                => F,
         G                => G,
         H                => H
      );

END struct;
